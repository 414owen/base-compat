(<=<) :: Monad m => (b -> m c) -> (a -> m b) -> a -> m c
(<$!>) :: Monad m => (a -> b) -> m a -> m b
(=<<) :: Monad m => (a -> m b) -> m a -> m b
(>=>) :: Monad m => (a -> m b) -> (b -> m c) -> a -> m c
(>>=) :: Monad m => m a -> (a -> m b) -> m b
(>>) :: Monad m => m a -> m b -> m b
ap :: Monad m => m (a -> b) -> m a -> m b
fail :: Monad m => GHC.Base.String -> m a
filterM :: Monad m => (a -> m GHC.Types.Bool) -> [a] -> m [a]
fmap :: Functor f => (a -> b) -> f a -> f b
foldM :: (Monad m, Data.Foldable.Foldable t) =>    (b -> a -> m b) -> b -> t a -> m b
foldM_ :: (Monad m, Data.Foldable.Foldable t) =>    (b -> a -> m b) -> b -> t a -> m ()
forever :: Monad m => m a -> m b
forM :: (Monad m, Data.Traversable.Traversable t) =>    t a -> (a -> m b) -> m (t b)
forM_ :: (Monad m, Data.Foldable.Foldable t) => t a -> (a -> m b) -> m ()
guard :: Control.Applicative.Alternative f => GHC.Types.Bool -> f ()
join :: Monad m => m (m a) -> m a
liftM :: Monad m => (a1 -> r) -> m a1 -> m r
liftM2 :: Monad m => (a1 -> a2 -> r) -> m a1 -> m a2 -> m r
liftM3 :: Monad m => (a1 -> a2 -> a3 -> r) -> m a1 -> m a2 -> m a3 -> m r
liftM4 :: Monad m =>    (a1 -> a2 -> a3 -> a4 -> r) -> m a1 -> m a2 -> m a3 -> m a4 -> m r
liftM5 :: Monad m =>    (a1 -> a2 -> a3 -> a4 -> a5 -> r)    -> m a1 -> m a2 -> m a3 -> m a4 -> m a5 -> m r
mapAndUnzipM :: Monad m => (a -> m (b, c)) -> [a] -> m ([b], [c])
mapM :: (Monad m, Data.Traversable.Traversable t) =>    (a -> m b) -> t a -> m (t b)
mapM_ :: (Monad m, Data.Foldable.Foldable t) => (a -> m b) -> t a -> m ()
mfilter :: MonadPlus m => (a -> GHC.Types.Bool) -> m a -> m a
mplus :: MonadPlus m => m a -> m a -> m a
msum :: (MonadPlus m, Data.Foldable.Foldable t) => t (m a) -> m a
mzero :: MonadPlus m => m a
replicateM :: Monad m => GHC.Types.Int -> m a -> m [a]
replicateM_ :: Monad m => GHC.Types.Int -> m a -> m ()
return :: Monad m => a -> m a
sequence :: (Monad m, Data.Traversable.Traversable t) => t (m a) -> m (t a)
sequence_ :: (Monad m, Data.Foldable.Foldable t) => t (m a) -> m ()
unless :: Control.Applicative.Applicative f =>    GHC.Types.Bool -> f () -> f ()
void :: Functor f => f a -> f ()
when :: Control.Applicative.Applicative f =>    GHC.Types.Bool -> f () -> f ()
zipWithM :: Monad m => (a -> b -> m c) -> [a] -> [b] -> m [c]
zipWithM_ :: Monad m => (a -> b -> m c) -> [a] -> [b] -> m ()
